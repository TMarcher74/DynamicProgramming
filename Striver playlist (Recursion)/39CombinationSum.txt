// https://leetcode.com/problems/combination-sum/description/

class Solution {
public:
    void f(int index, const vector<int>& cand, const int target, vector<int>& subs, vector<vector<int>>& subseq, int sum) {
        if(sum > target) return;
        if(index >= cand.size()) {
            if(sum == target) {
                if(find(subseq.begin(), subseq.end(), subs) != subseq.end()) return;
                subseq.push_back(subs);
                return;
            }
            return;
        }

        sum+=cand[index];
        subs.push_back(cand[index]);
        f(index, cand, target, subs, subseq, sum);
        // f(index+1, cand, target, subs, subseq, sum);

        sum-=cand[index];
        subs.pop_back();
        f(index+1, cand, target, subs, subseq, sum);

    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> subseq;
        vector<int> subs;
        f(0, candidates, target, subs, subseq, 0);
        return subseq;
    }

};